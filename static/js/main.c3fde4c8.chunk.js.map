{"version":3,"sources":["services/imagesApi.js","components/Searchbar/Searchbar.js","components/ImageGallery/ImageGallery.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Button/Button.js","components/Modal/Modal.js","App.js","index.js"],"names":["fetchImages","currentPage","searchQuery","pageSize","axios","get","then","response","data","hits","Searchbar","onSubmit","useState","query","setQuery","className","e","preventDefault","type","value","onChange","currentTarget","autoComplete","autoFocus","placeholder","ImageGallery","children","id","ImageGalleryItem","images","onClick","map","webformatURL","tags","largeImageURL","src","alt","Button","modalRoot","document","querySelector","Modal","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","target","App","setImages","setCurrentPage","setSearchQuery","isLoading","setIsLoading","error","setError","setLargeImageURL","showModal","setShowModal","prevImages","prevCurrentPage","scrollTo","top","scrollHeight","behavior","length","Error","catch","message","finally","toggleModal","prevShowModal","renderLoadButton","style","textAlign","image","color","height","width","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c3fde4c8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst fetchImages = ({ currentPage = 1, searchQuery = \"\", pageSize = 12 }) => {\n  return axios\n    .get(\n      `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&per_page=${pageSize}&key=21244519-50cd1518df4ac35a1fd6e5fdb&image_type=photo&orientation=horizontal`\n    )\n    .then((response) => response.data.hits);\n};\n\nexport default fetchImages;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState(\"\");\n\n  const handleChange = (e) => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(query);\n\n    setQuery(\"\");\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form onSubmit={handleSubmit} className=\"SearchForm\">\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          value={query}\n          onChange={handleChange}\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ImageGallery = ({ children }) => (\n  <ul id=\"imageGallery\" className=\"ImageGallery\">\n    {children}\n  </ul>\n);\n\nImageGallery.propTypes = {\n  children: PropTypes.object.isRequired,\n};\n\nexport default ImageGallery;\n","import PropTypes from \"prop-types\";\n\nconst ImageGalleryItem = ({ images, onClick }) =>\n  images.map(({ id, webformatURL, tags, largeImageURL }) => (\n    <li className=\"ImageGalleryItem\" key={id}>\n      <img\n        src={webformatURL}\n        alt={tags}\n        className=\"ImageGalleryItem-image\"\n        onClick={() => {\n          onClick(largeImageURL);\n        }}\n      />\n    </li>\n  ));\n\nImageGalleryItem.propTypes = {\n  images: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGalleryItem;\n","const Button = ({ onClick }) => {\n  return (\n    <button onClick={onClick} type=\"button\" className=\"Button\">\n      Load more\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\nconst modalRoot = document.querySelector(\"#modal-root\");\n\nexport const Modal = ({ children, onClose }) => {\n  // componentDidMount() {\n  //   window.addEventListener(\"keydown\", this.handleKeyDown);\n  // }\n\n  // componentWillUnmount() {\n  //   window.removeEventListener(\"keydown\", this.handleKeyDown);\n  // }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = (e) => {\n    if (e.code === \"Escape\") {\n      onClose();\n    }\n  };\n\n  const handleOverlayClick = (e) => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleOverlayClick}>\n      <div className=\"Modal\">{children}</div>\n    </div>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./styles.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport fetchImages from \"../src/services/imagesApi\";\nimport Loader from \"react-loader-spinner\";\n\nimport Searchbar from \"./components/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport ImageGalleryItem from \"./components/ImageGalleryItem\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\n\nexport const App = () => {\n  // state = {\n  //   images: [],\n  //   currentPage: 1,\n  //   searchQuery: \"\",\n  //   isLoading: false,\n  //   error: null,\n  //   largeImageURL: \"\",\n  //   showModal: false,\n  // };\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [largeImageURL, setLargeImageURL] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.searchQuery !== this.state.searchQuery) {\n  //     this.getImages();\n  //   }\n  // }\n\n  const onChangeQuery = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n    setImages([]);\n    setError(null);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchImages({ currentPage, searchQuery })\n      .then((images) => {\n        setImages((prevImages) => [...prevImages, ...images]);\n        setCurrentPage((prevCurrentPage) => prevCurrentPage + 1);\n        if (currentPage > 1) {\n          window.scrollTo({\n            top: document.querySelector(\"#imageGallery\").scrollHeight,\n            behavior: \"smooth\",\n          });\n        }\n        if (images.length < 1) {\n          throw new Error(\"Please try again your request\");\n        }\n      })\n      .catch((error) => setError(error.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [searchQuery]);\n\n  const toggleModal = () => {\n    setShowModal((prevShowModal) => !prevShowModal);\n  };\n\n  const handleClick = (image) => {\n    toggleModal();\n    setLargeImageURL(image);\n  };\n\n  const renderLoadButton = images.length > 0 && !isLoading;\n\n  return (\n    <div>\n      <Searchbar onSubmit={onChangeQuery} />\n\n      {error && (\n        <h2 style={{ textAlign: \"center\" }}>Please try again your request</h2>\n      )}\n\n      <ImageGallery>\n        <ImageGalleryItem images={images} onClick={handleClick} />\n      </ImageGallery>\n\n      {isLoading && (\n        <Loader\n          className=\"Loader\"\n          type=\"Circles\"\n          color=\"#471135\"\n          height={100}\n          width={100}\n        />\n      )}\n\n      {renderLoadButton && <Button onClick={() => null} />}\n\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <img src={largeImageURL} alt=\"\" />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}